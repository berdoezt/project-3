// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	model "project-tiga/model"

	mock "github.com/stretchr/testify/mock"
)

// IOrderRepository is an autogenerated mock type for the IOrderRepository type
type IOrderRepository struct {
	mock.Mock
}

// Add provides a mock function with given fields: newOrder
func (_m *IOrderRepository) Add(newOrder model.Order) error {
	ret := _m.Called(newOrder)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.Order) error); ok {
		r0 = rf(newOrder)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserID provides a mock function with given fields: userID
func (_m *IOrderRepository) GetByUserID(userID string) ([]model.Order, error) {
	ret := _m.Called(userID)

	var r0 []model.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]model.Order, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) []model.Order); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Order)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIOrderRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIOrderRepository creates a new instance of IOrderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIOrderRepository(t mockConstructorTestingTNewIOrderRepository) *IOrderRepository {
	mock := &IOrderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
